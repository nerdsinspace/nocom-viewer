var MCTileLayer=L.TileLayer.extend({initialize:function(url,options){this._url=url;this._imageFormat=options["imageFormat"];L.setOptions(this,options);},getTileUrl:function(tile){var zoom=this._map.getZoom();var url=CONFIG.baseUrl;if(tile.x<0||tile.x>=Math.pow(2,zoom)||tile.y<0||tile.y>=Math.pow(2,zoom)){return url+CONFIG.blank;}else if(zoom==0){url+=this._url+"/base";}else{url+=this._url;for(var z=zoom-1;z>=0;--z){var x=Math.floor(tile.x/Math.pow(2,z))%2;var y=Math.floor(tile.y/Math.pow(2,z))%2;url+="/"+(x+2*y+1);}}
url=url+"."+this._imageFormat;return url;},});var StoredViews=new Map();function createMCTileLayer(mapName,mapConfig,mapRotation){return new MCTileLayer(mapName+"/"+["tl","tr","br","bl"][mapRotation],{maxZoom:mapConfig.maxZoom,tileSize:mapConfig.tileSize,noWrap:true,continuousWorld:true,imageFormat:mapConfig.imageFormat,});};var IsometricRenderView={mcToLatLng:function(x,z,y,lmap,mapConfig,tileOffset,tileWidth){var mapSize=mapConfig.tileSize*Math.pow(2,mapConfig.maxZoom);var quarterBlockSize=mapConfig.textureSize/2;var point=L.point(2*(x+z),z-x+(256-y)*2).multiplyBy(quarterBlockSize).add(L.point(mapSize/2,mapSize/2)).add(L.point(-mapConfig.textureSize*16,0)).add(L.point(-tileOffset[0],-tileOffset[1]).multiplyBy(mapConfig.tileSize));return lmap.unproject(point,mapConfig.maxZoom);},latLngToMC:function(latLng,y,lmap,mapConfig,tileOffset,tileWidth){var mapSize=mapConfig.tileSize*Math.pow(2,mapConfig.maxZoom);var quarterBlockSize=mapConfig.textureSize/2;var point=lmap.project(latLng,mapConfig.maxZoom).add(L.point(tileOffset[0],tileOffset[1]).multiplyBy(mapConfig.tileSize)).add(L.point(mapConfig.textureSize*16,0)).add(L.point(-mapSize/2,-mapSize/2))
point.x/=2*quarterBlockSize;point.y/=quarterBlockSize;var x=0.5*(point.x-point.y-2*y+512);var z=0.5*(point.x+point.y+2*y-512);return[x,z,y];}};var TopdownRenderView={mcToLatLng:function(x,z,y,lmap,mapConfig,tileOffset,tileWidth){var mapSize=mapConfig.tileSize*Math.pow(2,mapConfig.maxZoom);var blockWidth=mapConfig.tileSize/(16.0*tileWidth);var point=L.point(x,z).multiplyBy(blockWidth).add(L.point(mapSize/2,mapSize/2)).add(L.point(-tileOffset[0],-tileOffset[1]).multiplyBy(mapConfig.tileSize));return lmap.unproject(point,mapConfig.maxZoom);},latLngToMC:function(latLng,y,lmap,mapConfig,tileOffset,tileWidth){var mapSize=mapConfig.tileSize*Math.pow(2,mapConfig.maxZoom);var blockWidth=mapConfig.tileSize/(16.0*tileWidth);var mc=lmap.project(latLng,mapConfig.maxZoom).add(L.point(tileOffset[0],tileOffset[1]).multiplyBy(mapConfig.tileSize)).add(L.point(-mapSize/2,-mapSize/2)).divideBy(blockWidth);return[mc.x,mc.y,y];}};function MapcrafterUI(config){this.config=config;this.currentMap=null;this.currentRotation=null;this.lmap=null;this.layers={};this.handlers=[];this.controlsNotCreated=[];this.handlersNotCreated=[];this.created=false;this.addHandler(new PosHashHandler());}
MapcrafterUI.prototype.init=function(){this.lmap=L.map("mcmap",{crs:L.CRS.Simple}).setView([0,0],0,{animate:false});this.lmap.attributionControl.addAttribution("2b2t map 2b2t spawn map 2b2t port 2b2t bots 2b2t version");var firstMap=null;for(var i in this.config["mapsOrder"]){var map=this.config["mapsOrder"][i];var mapConfig=this.config["maps"][map];this.layers[map]={};for(var i2 in mapConfig.rotations){var rotation=mapConfig.rotations[i2];this.layers[map][rotation]=createMCTileLayer(map,mapConfig,rotation);if(firstMap===null)
firstMap=map;}}
this.setMap(this.config["defaultMap"]);this.created=true;for(var i=0;i<this.controlsNotCreated.length;i++){var control=this.controlsNotCreated[i];this.addControl(control[0],control[1],control[2]);}
for(var i=0;i<this.handlersNotCreated.length;i++)
this.addHandler(this.handlersNotCreated[i]);this.controlsNotCreated=[];this.handlersNotCreated=[];};MapcrafterUI.prototype.getCurrentMap=function(){return this.currentMap;};MapcrafterUI.prototype.getCurrentRotation=function(){return this.currentRotation;};MapcrafterUI.prototype.getTileSetGroupConfig=function(group){return group in this.config["tileSetGroups"]?this.config["tileSetGroups"][group]:null;};MapcrafterUI.prototype.getMapConfigs=function(){return this.config["maps"];};MapcrafterUI.prototype.getMapConfigsOrder=function(){return this.config["mapsOrder"];};MapcrafterUI.prototype.getMapConfig=function(map){return map in this.config["maps"]?this.config["maps"][map]:null;};MapcrafterUI.prototype.getCurrentMapConfig=function(){return this.getMapConfig(this.currentMap);};MapcrafterUI.prototype.setMapAndRotation=function(map,rotation){var oldMapConfig=this.getCurrentMapConfig();var mapConfig=this.getMapConfig(map);var oldMapLayer=null;var oldView=null;var oldZoom=0;if(this.currentMap!=null&&this.currentRotation!=null){oldMapLayer=this.layers[this.currentMap][this.currentRotation];oldView=this.latLngToMC(this.lmap.getCenter(),oldMapConfig.worldSeaLevel);oldZoom=this.lmap.getZoom();}
this.currentMap=map;this.currentRotation=parseInt(rotation);if(oldMapLayer!=null)
this.lmap.removeLayer(oldMapLayer);this.lmap.addLayer(this.layers[this.currentMap][this.currentRotation]);if(oldMapConfig){StoredViews.set(oldMapConfig.worldName,oldView);StoredViews.set(oldMapConfig.worldName+"_zoom",oldZoom-oldMapConfig.relativeZoom);}
if(oldMapLayer==null||oldMapConfig.worldName!==mapConfig.worldName){if(StoredViews.has(mapConfig.worldName)){oldView=StoredViews.get(mapConfig.worldName);oldZoom=StoredViews.get(mapConfig.worldName+"_zoom");this.lmap.setView(this.mcToLatLng(oldView[0],oldView[1],oldView[2]),Math.min(Math.max(oldZoom+mapConfig.relativeZoom,0),mapConfig.maxZoom),{animate:false});}else{var zoom=0;if("defaultZoom"in mapConfig)
zoom=mapConfig.defaultZoom;if("defaultView"in mapConfig){var x=mapConfig.defaultView[0];var z=mapConfig.defaultView[1];var y=mapConfig.defaultView[2];this.lmap.setView(this.mcToLatLng(x,z,y),zoom,{animate:false});}else{this.lmap.setView(this.mcToLatLng(0,mapConfig.worldSeaLevel,0),zoom,{animate:false});}}}else{this.lmap.setView(this.mcToLatLng(oldView[0],oldView[1],oldView[2]),Math.min(Math.max(oldZoom-oldMapConfig.relativeZoom+mapConfig.relativeZoom,0),mapConfig.maxZoom),{animate:false});}
for(var i=0;i<this.handlers.length;i++)
this.handlers[i].onMapChange(this.currentMap,this.currentRotation);};MapcrafterUI.prototype.setMap=function(map){var oldMapConfig=this.getCurrentMapConfig();var mapConfig=this.getMapConfig(map);var sameWorld=oldMapConfig==null?false:oldMapConfig.world==mapConfig.world;if(sameWorld&&mapConfig.rotations.indexOf(this.currentRotation)!=-1){this.setMapAndRotation(map,this.currentRotation);}else{var rotation=-1;if("defaultRotation"in mapConfig)
rotation=mapConfig.defaultRotation;if(mapConfig.rotations.indexOf(rotation)==-1)
rotation=mapConfig.rotations[0];this.setMapAndRotation(map,rotation);}};MapcrafterUI.prototype.setMapRotation=function(rotation){this.setMapAndRotation(this.currentMap,rotation);};MapcrafterUI.prototype.addControl=function(control,position,index){if(!this.created){this.controlsNotCreated.push([control,position,index]);return;}
var self=this;var ControlType=L.Control.extend({onAdd:function(map){var wrapper=document.createElement("div");if(control.usePanelWrapper()){wrapper.setAttribute("class","control-wrapper control-wrapper-panel panel panel-default");wrapper.setAttribute("id","control-wrapper-"+control.getName());}else{wrapper.setAttribute("class","control-wrapper control-wrapper-invisible");wrapper.setAttribute("id","control-wrapper-"+control.getName());}
wrapper.onmouseover=function(){map.dragging.disable();};wrapper.onmouseout=function(){map.dragging.enable();};control.ui=self;control.create(wrapper);wrapper.index=index;return wrapper;},});this.lmap.addControl(new ControlType({position:position,}));if(control.getHandler())
this.addHandler(control.getHandler());};MapcrafterUI.prototype.addHandler=function(handler){if(!this.created){this.handlersNotCreated.push(handler);return;}
handler.ui=this;handler.create();handler.onMapChange(this.currentMap,this.currentRotation);this.handlers.push(handler);};MapcrafterUI.prototype.mcToLatLng=function(x,z,y){var mapConfig=this.getCurrentMapConfig();var tileSetGroup=this.getTileSetGroupConfig(mapConfig.tileSetGroup);var tileOffset=tileSetGroup.tileOffsets[this.currentRotation];var tileWidth=tileSetGroup.tileWidth;for(var i=0;i<this.currentRotation;i++){var nx=-z+512;var nz=x;x=nx;z=nz;}
if(mapConfig.renderView=="isometric")
return IsometricRenderView.mcToLatLng(x,z,y,this.lmap,mapConfig,tileOffset,tileWidth);return TopdownRenderView.mcToLatLng(x,z,y,this.lmap,mapConfig,tileOffset,tileWidth);};MapcrafterUI.prototype.latLngToMC=function(latLng,y){var mapConfig=this.getCurrentMapConfig();var tileSetGroup=this.getTileSetGroupConfig(mapConfig.tileSetGroup);var tileOffset=tileSetGroup.tileOffsets[this.currentRotation];var tileWidth=tileSetGroup.tileWidth;var mc;if(mapConfig.renderView=="isometric")
mc=IsometricRenderView.latLngToMC(latLng,y,this.lmap,mapConfig,tileOffset,tileWidth);else
mc=TopdownRenderView.latLngToMC(latLng,y,this.lmap,mapConfig,tileOffset,tileWidth);var x=mc[0],z=mc[1];for(var i=0;i<this.currentRotation;i++){var nx=z;var nz=-x+512;x=nx;z=nz;}
return[x,z,y];};